#include "Servo.h"
#include"TFT_eSPI.h"
#include<arduino.h>

#define LCD_BACKLIGHT (72Ul) // Control Pin of LCD
Servo myservo1;
#define SPEAKER D1

int red=31<<11;
int green =63<<5;
int blue= 31<<0;

// MENU Variables
int selection=0;
int x=0;
int y=30;
int old_y=30;
int selectd=0;
int x1=5;
int x2=0;
int x3=90;

int h=50;

//running mode

bool graphMode=false;
//training variables
int training[10][2];
int inc=1;
int count=0;
int pos = 0;
int old_pos=0;
int brightness = 0;
int old_brightness=0;
int i=0;
int dist=0;
int mini=0;
int DCount=0;
String state="train";
bool state_flag= true ;

//training mode
char  howMany[16];
char howManyNow[16];
char * menuNames[]={"Start Application","Read Information"};

//info variables
int pageN=0;

//display motor values
float x_motor=0.0;
float y_motor=0.0;
float yRect=0.0;
float oldyRect=0.0;

// ICONS

const unsigned char TRASH1[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3F,0x00,0x00,0xFC,0x3F,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,
0xF0,0xFF,0xFF,0x0F,0xF0,0xFF,0xFF,0x0F,0x0C,0x00,0x00,0x30,0x0C,0x00,0x00,0x30,0x0C,0x00,0x00,0x30,0x0C,0x00,0x00,0x30,
0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,
0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,
0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0x30,0x00,0x00,0x0C,0xC0,0xFF,0xFF,0x03,0xC0,0xFF,0xFF,0x03,
  };

const unsigned char TRASH2[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xCF,0xF3,0x00,0x00,0xD7,0xF3,0x00,0x00,0xCF,0xF3,0x00,0x00,0xD7,0xF3,0x00,0x00,0xCF,0xF3,0x00,0x00,0xD7,0xF3,0x00,
0x00,0xCF,0xF3,0x00,0x00,0xD7,0xF3,0x00,0x00,0xCF,0xF3,0x00,0x00,0xD7,0xF3,0x00,0x00,0xCF,0xF3,0x00,0x00,0xCF,0xF3,0x00,
0x00,0xCF,0xF3,0x00,0x00,0xCF,0xF3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

const unsigned char HELP1[] = { //BLACK
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x3F,0x00,0x00,0xFF,0x3F,0x00,
0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x30,0x00,0x00,0x03,0x30,0x00,0x00,0x03,0x30,0xF0,0x03,0x03,0x30,0xF0,0x03,0x03,
0xC0,0xFF,0x03,0x03,0xC0,0xFF,0x03,0x01,0x00,0x0C,0xC0,0x00,0x00,0x14,0xC0,0x00,0x00,0x0C,0x3C,0x00,0x00,0x14,0x3C,0x00,
0x00,0xF0,0x03,0x00,0x00,0xE8,0x03,0x00,0x00,0x0C,0x0C,0x00,0x00,0x14,0x0C,0x00,0x00,0x0C,0x0C,0x00,0x00,0x0C,0x0C,0x00,
0x00,0xF0,0x03,0x00,0x00,0xF0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  };

  const unsigned char ARRRIGHT[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x04,0x01,0x00,0x20,0x08,0x02,0x00,
0x40,0x10,0x04,0x00,0x80,0x20,0x08,0x00,0x00,0x41,0x10,0x00,0x00,0x82,0x20,0x00,0x00,0x04,0x41,0x00,0x00,0x08,0x82,0x00,
0x00,0x10,0x04,0x01,0x00,0x20,0x08,0x02,0x00,0x40,0x10,0x04,0x00,0x80,0x20,0x08,0x00,0x40,0x10,0x04,0x00,0x20,0x08,0x02,
0x00,0x10,0x04,0x01,0x00,0x08,0x82,0x00,0x00,0x04,0x41,0x00,0x00,0x82,0x20,0x00,0x00,0x41,0x10,0x00,0x80,0x20,0x08,0x00,
0x40,0x10,0x04,0x00,0x20,0x08,0x02,0x00,0x10,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  };

    const unsigned char ARRLEFT[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x08,0x00,0x40,0x10,0x04,
0x00,0x20,0x08,0x02,0x00,0x10,0x04,0x01,0x00,0x08,0x82,0x00,0x00,0x04,0x41,0x00,0x00,0x82,0x20,0x00,0x00,0x41,0x10,0x00,
0x80,0x20,0x08,0x00,0x40,0x10,0x04,0x00,0x20,0x08,0x02,0x00,0x10,0x04,0x01,0x00,0x20,0x08,0x02,0x00,0x40,0x10,0x04,0x00,
0x80,0x20,0x08,0x00,0x00,0x41,0x10,0x00,0x00,0x82,0x20,0x00,0x00,0x04,0x41,0x00,0x00,0x08,0x82,0x00,0x00,0x10,0x04,0x01,
0x00,0x20,0x08,0x02,0x00,0x40,0x10,0x04,0x00,0x80,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

const unsigned char HELP2[] = { //WHITE
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xFF,0x3F,0x00,0x00,0xFF,0x3F,0x00,0xC0,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0x00,0xC0,0x0F,0xFC,0x00,0xC0,0x17,0xFC,0x00,
0x00,0x00,0xFC,0x00,0x00,0x00,0xFC,0x00,0x00,0xF0,0x3F,0x00,0x00,0xE8,0x3F,0x00,0x00,0xF0,0x03,0x00,0x00,0xE8,0x03,0x00,
0x00,0x00,0x0C,0x00,0x00,0x00,0x0C,0x00,0x00,0xB0,0x01,0x00,0x00,0xE8,0x03,0x00,0x00,0xF0,0x03,0x00,0x00,0xF0,0x03,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

const unsigned char RUN[]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x01,0x00,0x00,
0x80,0x07,0x00,0x00,0x80,0x0F,0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0xFF,0x00,0x00,0x80,0xFF,0x01,0x00,0x80,0xFF,0x07,0x00,
0x80,0xFF,0x1F,0x00,0x80,0xFF,0x3F,0x00,0x80,0xFF,0xFF,0x00,0x80,0xFF,0xFF,0x01,0x80,0xFF,0xFB,0x00,0x80,0xFF,0x3F,0x00,
0x80,0xFF,0x1F,0x00,0x80,0xFF,0x07,0x00,0x80,0xFF,0x03,0x00,0x80,0xFF,0x00,0x00,0x80,0x3F,0x00,0x00,0x80,0x0F,0x00,0x00,
0x80,0x03,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
const unsigned char QUIT[]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x7C,0x00,0xF8,0x00,0xF8,0x00,0x7C,0x00,0xF0,0x01,0x3E,0x00,0xE0,0x03,0x1F,0x00,0xC0,0x87,0x0F,0x00,0x80,0xCF,0x07,0x00,
0x00,0xFF,0x03,0x00,0x00,0xFE,0x01,0x00,0x00,0xFC,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0xFE,0x01,0x00,0x00,0xFF,0x03,0x00,
0x80,0xCF,0x07,0x00,0xC0,0x87,0x0F,0x00,0xE0,0x03,0x1F,0x00,0xF0,0x01,0x3E,0x00,0xF8,0x00,0x7C,0x00,0x7C,0x00,0xF8,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

const unsigned char GRAPH1[]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x00,
0x00,0x18,0x00,0x03,0x30,0x18,0x00,0x03,0x30,0x18,0x00,0x03,0x30,0x18,0x00,0x03,0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,
0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,
0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,0x30,0x18,0x0C,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

const unsigned char GRAPH2[]={
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x18,0x80,0x01,0x00,0x18,
0x80,0x01,0x00,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,
0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,
0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x80,0xC1,0x60,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const unsigned char GRAPH3[]={
  0x00,0x20,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0xCC,0x00,0x00,0x00,0x86,0x00,0x00,0x00,0x83,0x01,0x00,
  0x80,0x01,0x01,0x00,0xC0,0x00,0x03,0x38,0x60,0x00,0x02,0x0E,0x30,0x00,0x86,0x03,0x00,0x00,0xE4,0x00,0x00,0x00,0x3C,0x00,
  0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


const unsigned char HOME1[]={
0x00,0x80,0x03,0x00,0x00,0xC0,0x07,0x00,0x00,0x60,0x0C,0x00,0x00,0x30,0x18,0x00,0x00,0x18,0x30,0x00,0x00,0x0C,0x60,0x00,
0x00,0x06,0xC0,0x00,0x00,0x03,0x80,0x01,0x80,0x01,0x00,0x03,0xC0,0x00,0x00,0x06,0x60,0x00,0x00,0x0C,0xF0,0xFF,0xFF,0x1F,
0x58,0x00,0x00,0x34,0x40,0x00,0x00,0x04,0x40,0xFC,0xFC,0x04,0x40,0x84,0x84,0x04,0x40,0x84,0x84,0x04,0x40,0x84,0x84,0x04,
0x40,0x84,0x84,0x04,0x40,0x84,0x84,0x04,0x40,0x84,0xFC,0x04,0x40,0x84,0x00,0x04,0x40,0x84,0x00,0x04,0x40,0x84,0x00,0x04,
0x40,0x84,0x00,0x04,0x40,0x84,0x00,0x04,0x40,0x84,0x00,0x04,0xC0,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

const unsigned char HOME2[]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0xC0,0x07,0x00,0x00,0xE0,0x0F,0x00,0x00,0xF0,0x1F,0x00,
0x00,0xF8,0x3F,0x00,0x00,0xFC,0x7F,0x00,0x00,0xFE,0xFF,0x00,0x00,0xFF,0xFF,0x01,0x80,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,
0x80,0xFF,0xFF,0x03,0x80,0xFF,0xFF,0x03,0x80,0x03,0x03,0x03,0x80,0x7B,0x7B,0x03,0x80,0x7B,0x7B,0x03,0x80,0x7B,0x7B,0x03,
0x80,0x7B,0x7B,0x03,0x80,0x7B,0x7B,0x03,0x80,0x7B,0x03,0x03,0x80,0x7B,0xFF,0x03,0x80,0x7B,0xFF,0x03,0x80,0x7B,0xFF,0x03,
0x80,0x7B,0xFF,0x03,0x80,0x7B,0xFF,0x03,0x80,0x03,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};

const unsigned char BIGRUN[]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
0x80,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
0x80,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x0F,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,
0x80,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0x0F,0x00,0x00,0x00,
0x80,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x00,
0x80,0xFF,0xFF,0xFF,0xFF,0x0F,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,
0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,
0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,
0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
0x80,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x0F,0x00,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x00,
0x80,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0x0F,0x00,0x00,0x00,
0x80,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,0x80,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,
0x80,0xFF,0xFF,0x0F,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
0x80,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

};

const unsigned char INFO[]={
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x01,0x00,0x00,
0x00,0x00,0xC0,0x03,0x00,0x07,0x00,0x00,0x00,0x00,0xF0,0x80,0x07,0x1E,0x00,0x00,0x00,0x00,0x38,0xE0,0x1F,0x30,0x00,0x00,
0x00,0x00,0x0C,0xF0,0x3F,0x60,0x00,0x00,0x00,0x00,0x06,0xF0,0x3F,0xC0,0x00,0x00,0x00,0x00,0x03,0xE0,0x1F,0x80,0x01,0x00,
0x00,0x80,0x01,0xC0,0x0F,0x00,0x03,0x00,0x00,0x80,0x00,0x00,0x03,0x00,0x06,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0xC0,0x00,0xE0,0x3F,0x00,0x0C,0x00,0x00,0x60,0x00,0xC0,0x7F,0x00,0x0C,0x00,0x00,0x60,0x00,0x80,0xFF,0x00,0x18,0x00,
0x00,0x60,0x00,0x80,0xFF,0x00,0x18,0x00,0x00,0x30,0x00,0x00,0xFF,0x01,0x18,0x00,0x00,0x30,0x00,0x00,0xFF,0x03,0x30,0x00,
0x00,0x10,0x00,0x00,0xFE,0x03,0x20,0x00,0x00,0x10,0x00,0x00,0xFE,0x03,0x20,0x00,0x00,0x18,0x00,0x00,0xFE,0x03,0x60,0x00,
0x00,0x18,0x00,0x00,0xFE,0x03,0x60,0x00,0x00,0x18,0x00,0x00,0xFF,0x01,0x60,0x00,0x00,0x18,0x00,0x00,0xFF,0x01,0x60,0x00,
0x00,0x10,0x00,0x80,0xFF,0x00,0x60,0x00,0x00,0x10,0x00,0x80,0xFF,0x00,0x20,0x00,0x00,0x30,0x00,0xC0,0xFF,0x00,0x20,0x00,
0x00,0x30,0x00,0xC0,0x7F,0x00,0x30,0x00,0x00,0x20,0x00,0xE0,0x3F,0x00,0x30,0x00,0x00,0x60,0x00,0xF0,0x3F,0x00,0x10,0x00,
0x00,0x60,0x00,0xF0,0x1F,0x00,0x18,0x00,0x00,0x40,0x00,0xF0,0x1F,0x00,0x18,0x00,0x00,0xC0,0x00,0xF0,0x0F,0x00,0x0C,0x00,
0x00,0x80,0x01,0xF0,0x1F,0x00,0x0C,0x00,0x00,0x80,0x01,0xF0,0x1F,0x00,0x06,0x00,0x00,0x00,0x03,0xE0,0x3F,0x00,0x06,0x00,
0x00,0x00,0x06,0xE0,0x3F,0x00,0x03,0x00,0x00,0x00,0x0C,0xC0,0x7F,0x80,0x01,0x00,0x00,0x00,0x18,0x00,0x00,0xC0,0x00,0x00,
0x00,0x00,0x30,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0xF0,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0xC0,0x07,0x00,0x0F,0x00,0x00,
0x00,0x00,0x00,0x1F,0xE0,0x03,0x00,0x00,0x00,0x00,0x00,0xF8,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x0F,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4F,0xC8,0xE3,0x00,0x00,
0x00,0x00,0x00,0xC2,0x48,0x10,0x01,0x00,0x00,0x00,0x00,0x42,0xC9,0x11,0x01,0x00,0x00,0x00,0x00,0x42,0x4A,0x10,0x01,0x00,
0x00,0x00,0x00,0x42,0x4C,0x10,0x01,0x00,0x00,0x00,0x00,0x4F,0x48,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
TFT_eSPI tft;
#define LCD_BACKLIGHT (72Ul) // Control Pin of LCD

void setup() {
  // put your setup code here, to run once:

  tft.begin();
  tft.setRotation(3);
  Serial.begin(115200);
  
  tft.fillScreen(green);
  
  //myservo1.attach(D1); //Servo
  pinMode(SPEAKER,OUTPUT);   //Speaker
  
  pinMode(WIO_5S_UP,INPUT);
  pinMode(WIO_5S_DOWN,INPUT);
    
  pinMode(WIO_5S_LEFT,INPUT);
  pinMode(WIO_5S_RIGHT,INPUT);
  pinMode(WIO_5S_DOWN,INPUT);
  pinMode(WIO_5S_PRESS, INPUT);
  pinMode(WIO_LIGHT , INPUT);
  pinMode(WIO_BUZZER, OUTPUT);
  pinMode(WIO_KEY_A, INPUT);
  pinMode(WIO_KEY_B, INPUT);
  pinMode(WIO_KEY_C, INPUT);
  

  tft.setTextColor(TFT_BLACK, TFT_BLACK);
  
  //drawGraphics(0);
}

void loop() {
    menu1();
  }

int menu1(){
    x1=15;
    x2=90;
    x3=175;
    h=30;
    tft.fillScreen(TFT_GREEN);
    tft.setTextColor(TFT_WHITE,TFT_WHITE);
    tft.setTextSize(3);
    
    tft.fillRect(x1-25,0,50,h,(blue));
    tft.fillRect(x2-25,0,50,h,(blue));
    tft.fillRect(x3-25,0,50,h,(blue));
        
    tft.drawString("C",x1-tft.textWidth("C")/2,3);
    tft.drawString("B",x2-tft.textWidth("B")/2,3);
    tft.drawString("A",x3-tft.textWidth("A")/2,3);
    
    tft.fillRect(x1-10,h,20,h,(blue));
    tft.fillRect(x2-10,h,20,h-10,(blue));
    tft.fillRect(x3-10,h,20,h-20,(blue));

    tft.fillRect(x1-10,2*h,80,5,(blue));
    tft.fillRect(x2-10,2*h-10,80,5,(blue));
    tft.fillRect(x3-10,2*h-20,80,5,(blue));

    tft.fillRect(x1+50,2*h,20,30,(blue));
    tft.fillRect(x2+50,2*h-10,20,40,(blue));
    tft.fillRect(x3+50,2*h-20,20,50,(blue));

        
    tft.fillRect(120,3*h+10,80,h*3-10,(blue));
    tft.fillRect(30,3*h+10,80,h*3-10,(blue));
    tft.fillRect(210,3*h+10,80,h*3-10,(blue));
    tft.drawRect(20,3*h,280,h*3+10,(blue));

    
    tft.drawXBitmap(54,3*h+35,HOME1, 32, 30,TFT_WHITE);
    tft.drawXBitmap(54,3*h+35,HOME2, 32, 30,TFT_PURPLE);
    
    tft.drawXBitmap(218, 3*h+20,BIGRUN, 64, 60,TFT_GREEN);
    tft.drawXBitmap(128, 3*h+20, INFO, 64  ,60, TFT_WHITE);
    while(1){
      if(digitalRead(WIO_KEY_C) == LOW) {

        tft.fillRect(x1-25,0,50,h+5,(blue));
        tft.drawString("C",x1-tft.textWidth("C")/2,8);
        while(digitalRead(WIO_KEY_C)==LOW);
        tft.fillRect(x1-25,0,50,h+5,(green));
        tft.fillRect(x1-10,h,20,h,(blue));
        tft.fillRect(x1-25,0,50,h,(blue));
        tft.drawString("C",x1-tft.textWidth("C")/2,3);
        //home
        
      }
       if(digitalRead(WIO_KEY_B) == LOW) {
        tft.fillRect(x2-25,0,50,h+5,(blue));
        tft.drawString("B",x2-tft.textWidth("B")/2,8);
        while(digitalRead(WIO_KEY_B)==LOW);
        tft.fillRect(x2-25,0,50,h+5,(blue));
        tft.fillRect(x2-10,h,20,h-10,(blue));
        tft.fillRect(x2-25,0,50,h,(blue));
        tft.drawString("B",x2-tft.textWidth("B")/2,3);
        info();
        break;
        
      }
       if(digitalRead(WIO_KEY_A) == LOW) {
        tft.fillRect(x3-25,0,50,h+5,(blue));
        tft.drawString("A",x3-tft.textWidth("A")/2,8);
        while(digitalRead(WIO_KEY_A)==LOW);
        tft.fillRect(x3-25,0,50,h+5,(green));
        tft.fillRect(x3-10,h,20,h-20,(blue));
        tft.fillRect(x3-25,0,50,h,(blue));
        tft.drawString("A",x3-tft.textWidth("A")/2,3);
        smartMotor();
        break;
        
      }
      delay(200);
    }
}




void wiodisplay(){
  tft.fillScreen(green);
  if(state=="run"){

    tft.fillRect(-20,-10,50,45,(blue));
    tft.fillRect(65,-10,50,45,(blue));
    //tft.fillRect(150,-10,50,45,(blue));
    
    tft.drawXBitmap(4,3,QUIT, 32, 30,TFT_RED);
    tft.drawXBitmap(74,3,GRAPH1, 32, 30, TFT_WHITE);
    tft.drawXBitmap(74,3,GRAPH2, 32, 30,20<<11|25<<6|25);
    tft.drawXBitmap(74,3,GRAPH3, 32, 30,red);
    //tft.drawXBitmap(159,3,SAVE, 32, 30,TFT_GREEN);
    
    tft.drawString(" Running Mode", 220,5 );
    //tft.drawCircle(160,200,50, TFT_RED);
   // tft.fillRect(110,200,100,100, TFT_GREEN);
  }
  else if(state=="train"){

    tft.fillRect(-20,-10,50,45,(blue));
    tft.fillRect(65,-10,50,45,(blue));
    tft.fillRect(150,-10,50,45,(blue));

    tft.drawXBitmap(4,3,QUIT, 32, 30,TFT_RED);
    tft.drawXBitmap(74,3,TRASH1, 32, 30, TFT_WHITE);
    tft.drawXBitmap(74,3,TRASH2, 32, 30,20<<11|25<<6|25);
    tft.drawXBitmap(159,3,RUN, 32, 30,TFT_GREEN);

    tft.setTextColor(TFT_BLACK,TFT_BLACK);
    tft.setTextSize(1);
    tft.drawString(" Training Mode", 220,5 );
    drawGraph();
  }
}


void drawGraph(){


    tft.drawLine(50,220,300,220,TFT_RED);
    tft.drawLine(75,220,75,230,TFT_RED);
    tft.drawLine(255,220,255,230,TFT_RED);
    tft.drawString("0", 72,230 );
    tft.drawString("180", 252,230 );
    tft.drawString("MOTOR POSITION", 110,230 );
    tft.drawLine(50,50,50,220,TFT_RED);
    tft.drawLine(40,220,50,220,TFT_RED);
    tft.drawLine(40,70,50,70,TFT_RED);
    tft.drawString("MIN", 20,220 );
    tft.drawString("MAX", 20,70 );
    tft.setRotation(2);
    tft.drawString("LIGHT INTENSITY", 50,30 );
    tft.setRotation(3);
}
void info(){
    tft.fillScreen(green);
    tft.fillRect(-20,-10,50,45,(blue));
    tft.fillRect(65,-10,50,45,(blue));
    tft.fillRect(150,-10,50,45,(blue));

    tft.drawXBitmap(4,3,QUIT, 32, 30,TFT_RED);
    tft.drawXBitmap(74,3,ARRLEFT, 32, 30, TFT_WHITE);
    tft.drawXBitmap(159,3,ARRRIGHT, 32, 30,TFT_GREEN);

    tft.setTextSize(3);
    tft.fillRect(10,60,300,150,(blue));
    infoPage(pageN);
    while(digitalRead(WIO_KEY_C)){
       if (digitalRead(WIO_KEY_A)== LOW){
          while(digitalRead(WIO_KEY_A)== LOW);
          
          if(pageN<4){
            tft.fillRect(10,60,300,150,(blue));
          pageN+=1;
          infoPage(pageN);
          Serial.println(pageN);
          }
        }
        else if (digitalRead(WIO_KEY_B)== LOW){
          while(digitalRead(WIO_KEY_B)== LOW);
         if(pageN>0){
         tft.fillRect(10,60,300,150,(blue));
          pageN-=1;
          infoPage(pageN);
          Serial.println(pageN);
          }
      }
    }
    pageN=0;
}

void infoPage(int pageNumber){
  if (pageNumber==0){
   tft.drawString("About the Motor",40,110);
   Serial.println("what"); 
  }
  else if(pageNumber==1){
   tft.drawString("About the buttons",40,110);  
   Serial.println("tjat"); 
  }
  else if(pageNumber==2){
    tft.drawString("About saving data and viewing graph",40,110); 
  }
}


void buzz(int t){
  for (int i=0;i <t; i++){
      analogWrite(WIO_BUZZER,128);
      delay(200);
      analogWrite(WIO_BUZZER,0);
      delay(200);
  }
}
void displayTraining(){
     if(DCount>0){
        for (int i =0; i < DCount-1; i++){
        tft.fillCircle(75+training[i][0],220-training[i][1], 5, TFT_WHITE);
        }
             tft.fillCircle(75+training[DCount-1][0],220-training[DCount-1][1], 5, TFT_RED);
     }

}

void reset_wio(){ //resets all the training data to 0 
      DCount=0;
      state="train";
      state_flag=true;
      myservo1.write(0);
      pos=0;
      i=0;
      tft.fillScreen(green);
}




int showmotor(int pos){
  

  if(DCount>0){
    tft.fillCircle(75+old_pos,220-old_brightness, 5, TFT_GREEN);
     for (int i =0; i < DCount; i++){
     tft.fillCircle(75+training[i][0],220-training[i][1], 5, TFT_WHITE);
      }
     
     tft.fillCircle(75+pos,220-brightness, 5, TFT_RED);
  }  
}


void Play(int pos){

  for(int i=0;i<100;i++)
    {
        digitalWrite(SPEAKER,HIGH);
        delay(pos);
        digitalWrite(SPEAKER,LOW);
        delay(pos);
    }
}


int smartMotor(){
  wiodisplay();
  while(digitalRead(WIO_KEY_C)){
    brightness = analogRead(WIO_LIGHT);  
    brightness=150*(1-pow(2,-1*float(brightness)/300));

    
    if (abs(old_brightness-brightness)>10 || old_pos!=pos){ 
      tft.fillRect(70+old_pos,220-old_brightness,10,old_brightness,TFT_GREEN);
      tft.fillRect(70+pos,220-brightness,10,brightness,TFT_BLUE);
      old_brightness=brightness;
      old_pos=pos;
      displayTraining();
      
    }
    

    
    if(digitalRead(WIO_5S_LEFT) == LOW) {
      while (digitalRead(WIO_5S_LEFT) == LOW){
            count=count+1;
            pos = pos-inc ;
           // myservo1.write(pos);
           Play(pos);
           
            pos = max(0, min(pos,180));
            if (count>5){
              inc=min(10,count);
            }
            delay(100);

      }
      displayTraining();
      count=0;
      inc=1;
    }
     else if(digitalRead(WIO_5S_RIGHT) == LOW) {
       while (digitalRead(WIO_5S_RIGHT) == LOW){
            count=count+1;
            pos = pos+inc ;
            //myservo1.write(pos);
            Play(pos);
            
            pos = max(0, min(pos,180));
            if (count>5){
              inc=min(10,count);
            }
            delay(100);

      }
      displayTraining();
      count=0;
      inc=1;
    }

    
    else if(digitalRead(WIO_KEY_B)==LOW){
      tft.fillRect(65,-5,50,45,(blue));
      tft.drawXBitmap(74,8,TRASH1, 32, 30, TFT_WHITE);
      tft.drawXBitmap(74,8,TRASH2, 32, 30,20<<11|25<<6|25);
      while(digitalRead(WIO_KEY_B)==LOW){
      delay(100);
      }
      tft.fillRect(65,-5,50,45,(green));
      tft.fillRect(65,-10,50,45,(blue));
      tft.drawXBitmap(74,3,TRASH1, 32, 30, TFT_WHITE);
      tft.drawXBitmap(74,3,TRASH2, 32, 30,20<<11|25<<6|25);
     
     
     if (DCount>0){
      tft.fillCircle(75+training[DCount-1][0],220-training[DCount-1][1], 5, TFT_GREEN);
      DCount=DCount-1;
      Serial.println(DCount);
      displayTraining();
      
     }
         
    }
    if(digitalRead(WIO_5S_PRESS) == LOW){
        buzz(1);
        training[DCount][0]=pos;
        training[DCount][1]=brightness;
        i=i+1;
        DCount+=1;
        Serial.println(pos);
        Serial.println(brightness);
        displayTraining();
       }
   
    if(digitalRead(WIO_KEY_A) == LOW){
        state="run";
        state_flag=true;
        wiodisplay();
        buzz(3);
  
        while(digitalRead(WIO_KEY_C)){  //pressing the button will escape the run mode

          if(digitalRead(WIO_KEY_B) == LOW){
            delay(100);
              if(graphMode==false){
              tft.fillScreen(green);
              tft.fillRect(65,-10,50,45,(blue));
              tft.drawXBitmap(74,3,QUIT, 32, 30,TFT_RED);
              drawGraph();
              graphMode=true ;
              showmotor(pos);
          }
          else{
            delay(100);
              wiodisplay();
              graphMode=false ;
          }
            
          }
          brightness = analogRead(WIO_LIGHT);
          brightness=150*(1-pow(2,-1*float(brightness)/300));
          
          mini=1000;
          pos=0;
          for (int i=0;i<DCount;i++){
            dist=abs(brightness - training[i][1]);
            if (dist<mini){
              mini=dist;
              pos=training[i][0];  
            }
          }
         //myservo1.write(pos);
         Play(pos);
         if (pos!=old_pos & graphMode==true){
         showmotor(pos);
         old_brightness=brightness;
         old_pos=pos;
        }
          delay(100);
        }

      
      }
       
  }
  reset_wio();

}
