'''
SmartMotor

Run this program then move the motor and cover 
the light sensor and hit the right button for each training point.
When you are done, hit the center button - the motor should
move to the closest training point.  Hit the center button
again to stop.
'''
from mBLE import *

import hub, utime
ledBright = 7
motorSpeed = 50

class SmartPlot():
    def __init__(self, motorPort = hub.port.A, lightPort = hub.port.C):
        self.motor = motorPort.motor
        self.light = lightPort.device
        self.beep = hub.sound.beep
        self.led = hub.led
        self.screen = hub.display
        self.save = hub.button.right.is_pressed
        self.done = hub.button.center.is_pressed
        self.quit = hub.button.left.is_pressed
        self.training = []

    def Setup(self):
        while True:
            utime.sleep(0.5)
            try:
                self.motor.mode(3)
                self.motor.float()
                self.light.mode(4)  # read reflected light
                self.beep()
                self.screen.clear()
                return
            except:
                pass
                
    def Map(self,x=-1,y=-1):
        X,Y=0,0
        self.screen.clear()
        for (a,l) in self.training:
            Y = round(l /1024 * 4)
            X = round((a + 180) / 360 * 4)
            X = 5-X if X < 0 else X
            self.screen.pixel(X,Y,ledBright)
        if (x<0):
            return
        Y = round(x /1024 * 4)
        X = round((y + 180) / 360 * 4)
        X = 5-X if X < 0 else X
        self.screen.pixel(X,Y,9)

    def Train(self):
        self.led(3)
        self.Map()   
        while not self.done():
            while not self.save() and not self.done(): 
                if self.quit():   #did they want to quit?
                    return 
                utime.sleep(.1) # debounce 
                self.Map(self.light.get()[0],self.motor.get()[0])
                print({"training":self.training,"data":[self.light.get()[0],self.motor.get()[0]]})
                receiver.sendData({"training":self.training,"data":[self.light.get()[0],self.motor.get()[0]]})
            if not self.done():
                angle = self.motor.get()[0]
                bright = self.light.get()[0]
                while self.save():
                    utime.sleep(.1)
                self.training.append((angle,bright))
                print('(%d,%d)'%(angle,bright))
        while self.done(): 
            utime.sleep(.1) # debounce        
        self.beep()
        self.led(0)
        self.screen.clear()
        
    def Run(self):
        self.led(2)
        self.Map()   
        # grab reading
        while not self.done():
            if self.quit():
                return  #did they want to quit?
            bright = self.light.get()[0]
            min = 1000
            pos = 0
            for (a, l) in self.training:
                dist = abs(bright - l)
                if dist < min:
                    min = dist
                    pos = a
            self.Map(bright,pos)
            self.motor.run_to_position(pos,motorSpeed)
            utime.sleep(.1)
            #print('(%d,%d)'%(pos,bright)) 
        while self.done(): 
            utime.sleep(.1) # debounce        self.beep()
        self.beep()
        self.led(0)
        self.screen.clear()

SP = SmartPlot()

SP.Setup()
while not SP.quit():
    SP.Train()
    SP.Run()
SP.beep()
SP.led(10)
SP.screen.clear()

# hub.power_off()